substitutions:
  node_name: yawl-controller
  node_id: yawl_controller
  friendly_node_name: YAWL Controller

esphome:
  name: ${node_name}
  comment: ${friendly_node_name}
  platform: ESP8266
  board: esp12e
  name_add_mac_suffix: true
  project:
    name: lizardsystems.yawl-controller
    version: 1.0.0

wifi:
  ap: {}
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  power_save_mode: none


captive_portal:

logger:
  baud_rate: 0
  level: ERROR
  esp8266_store_log_strings_in_flash: false

ota:

web_server:
  port: 80

api:

binary_sensor:
  - platform: status
    name: ${friendly_node_name} Connection Status
    id: ${node_id}_connection_status
  

  - platform: gpio
    pin:
      number: GPIO0
      mode:
        input: true
        pullup: true
      inverted: true
    name: ${friendly_node_name} Light Button
    id: button_1
    on_press:
        then:
            - light.toggle: light_1
  

text_sensor:
  - platform: template
    name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start

  - platform: version
    name: ${friendly_node_name} ESPHome Version
    id: ${node_id}_esphome_version    

  - platform: wifi_info
    ip_address:
      name: ${friendly_node_name} IP Address
      id: ${node_id}_ip_address
      icon: mdi:ip-network

dallas:
  - pin: GPIO14

sensor:
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

  - platform: wifi_signal
    name: ${friendly_node_name} WiFi Signal
    id: ${node_id}_wifi_signal
    update_interval: 60s
    
  - platform: dallas
    index: 0
    name: ${friendly_node_name} Temperature
    

button:
  - platform: restart
    name: ${friendly_node_name} Restart
    id: ${node_id}_restart
    icon: "mdi:restart"

switch:
  - platform: gpio
    internal: true
    pin: GPIO12
    inverted: true
    name: ${friendly_node_name} Relay
    id: relay_1

remote_receiver:
  pin: GPIO4
  dump: all

light:
  - platform: fastled_clockless
    id: light_1
    rgb_order: GRB
    chipset: WS2812B
    pin: GPIO2
    num_leds: 60
    name: ${friendly_node_name} NeoPixel Light
    default_transition_length: 
      milliseconds: 100
    on_turn_on:
      - logger.log: "Light Turned On!"
      - switch.turn_on: relay_1
    on_turn_off:
      - logger.log: "Light Turned Off!"
      - switch.turn_off: relay_1
    effects:
      - random:
      - random:
          name: Slow Random Effect
          transition_length: 30s
          update_interval: 30s
      - random:
          name: Fast Random Effect
          transition_length: 4s
          update_interval: 5s
      - pulse:
      - pulse:
          name: Slow Pulse Effect
          # transition_length: 1s      
          update_interval: 2s
      - pulse:
          name: Fast Pulse Effect
          transition_length: 0.5s
          update_interval: 0.5s
      - strobe:
      - strobe:
          name: Custom Strobe Effect
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 90%
              blue: 0%
              duration: 500ms
            - state: false
              duration: 250ms
            - state: true
              brightness: 100%
              red: 0%
              green: 100%
              blue: 0%
              duration: 500ms
      - flicker:
      - flicker:
          name: Custom Flicker Effect
          alpha: 95%
          intensity: 1.5%
      - lambda:
          name: Custom Effect
          update_interval: 1s
          lambda: |-
            static int state = 0;
            auto call = id(light_1).turn_on();
            // Transition of 1000ms = 1s
            call.set_transition_length(1000);
            if (state == 0) {
              call.set_rgb(1.0, 1.0, 1.0);
            } else if (state == 1) {
              call.set_rgb(1.0, 0.0, 1.0);
            } else if (state == 2) {
              call.set_rgb(0.0, 0.0, 1.0);
            } else {
              call.set_rgb(1.0, 0.0, 0.0);
            }
            call.perform();
            state += 1;
            if (state == 4)
              state = 0;         
      - addressable_rainbow:
      - addressable_rainbow:
          name: Custom Rainbow Effect
          speed: 10
          width: 50           
      - addressable_color_wipe:
      - addressable_color_wipe:
          name: Custom Color Wipe Effect
          colors:
            - red: 100%
              green: 100%
              blue: 100%
              num_leds: 1
            - red: 0%
              green: 0%
              blue: 0%
              num_leds: 1
          add_led_interval: 100ms
          reverse: false
      - addressable_scan:
      - addressable_scan:
          name: Custom Scan Effect
          move_interval: 100ms
          scan_width: 1
      - addressable_twinkle:
      - addressable_twinkle:
          name: Custom Twinkle Effect
          twinkle_probability: 5%
          progress_interval: 4ms
      - addressable_random_twinkle:
      - addressable_random_twinkle:
          name: Custom Random Twinkle Effect
          twinkle_probability: 5%
          progress_interval: 32ms
      - addressable_fireworks:
      - addressable_fireworks:
          name: Custom Fireworks Effect
          update_interval: 32ms
          spark_probability: 10%
          use_random_color: false
          fade_out_rate: 120
      - addressable_flicker:
      - addressable_flicker:
          name: Custom Addressable Flicker Effect
          update_interval: 16ms
          intensity: 5%
      - flicker:
          name: Candle Flicker
          alpha: 90%
          intensity: 2.5%